{"version":3,"sources":["components/Category.js","api/index.js","api/Queries/CategoriesQuery.js","api/Queries/JokeQuery.js","actions/types.js","constants/Errors.js","components/Categories.js","actions/index.js","components/Joke.js","App.js","reducers/index.js","reducers/Jokes/index.js","store/index.js","index.js"],"names":["Category","title","className","to","toUpperCase","ApolloClient","uri","CATEGORIES_QUERY","gql","callback","client","query","then","res","catch","err","console","log","JOKE_QUERY","variable","variables","Categories","this","props","fetchCategories","jokes","loading","error","categories","length","map","category","key","undefined","Component","connect","dispatch","a","type","types","payload","CategoriesQuery","response","data","Errors","Joke","match","params","fetchJoke","random","JokeQuery","value","App","exact","path","component","combineReducers","state","action","selected_category","middlewares","ReduxThunk","store","applyMiddleware","createStore","createStoreWithMiddleware","RootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bff510a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Category({title}) {\r\n    return (\r\n        <div\r\n            className=\"card text-center p-3 col-md-3 bg-dark mx-3 my-3\">\r\n                <Link to={`/random/${title}`} className=\"card-body text-light\">{title.toUpperCase()}</Link>\r\n        </div>\r\n    )\r\n}","import ApolloClient from 'apollo-boost';\r\n\r\nexport default new ApolloClient({\r\n    uri: '/graphql'\r\n});","import gql from 'graphql-tag';\r\nimport client from '../../api';\r\n\r\nconst CATEGORIES_QUERY = gql`\r\n    query Categories{\r\n        categories\r\n    }\r\n`;\r\n\r\nexport default (callback) => {\r\n    client.query({\r\n        query: CATEGORIES_QUERY\r\n    })\r\n    .then(res => callback(res))\r\n    .catch(err => console.log(err));\r\n}","import gql from 'graphql-tag';\r\nimport client from '../../api';\r\n\r\nconst JOKE_QUERY = gql`\r\n    query JokeQuery($category: String!){\r\n        random(category: $category){\r\n            value\r\n        }\r\n    }\r\n`;\r\n\r\nexport default (variable, callback) => {\r\n    client.query({\r\n        query: JOKE_QUERY,\r\n        variables: variable\r\n    })\r\n    .then(res => callback(res))\r\n    .catch(err => console.log(err));\r\n}","export default {\r\n    GET_CATEGORIES: 'get_categories',\r\n    SELECT_CATEGORY: 'select_category',\r\n    LOADING: 'loading',\r\n    GET_JOKE: 'get_joke',\r\n    ON_ERROR: 'on_error'\r\n}","export default {\r\n    CATEGORY_ERROR: 'Oops... we can\\'t seem to find our categories',\r\n    JOKE_ERROR: 'Seems like Chuck Norris re-wrote this joke'\r\n}","import React, { Component, Fragment } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Category from './Category';\r\nimport {fetchCategories} from '../actions';\r\n\r\nclass Categories extends Component {\r\n\r\n    componentWillMount(){\r\n        this.props.fetchCategories();\r\n    }\r\n\r\n    render() {\r\n        const {loading, error, categories} = this.props.jokes;\r\n        if(loading){\r\n            return <h3 className='text-dark'>Loading</h3>\r\n        }\r\n\r\n        if(error){\r\n            return <h3 className='text-danger'>Oops...</h3>\r\n        }\r\n\r\n        if(categories){\r\n            if(categories.length < 1){\r\n                return <h3 className='text-danger'>Oops...</h3>;\r\n            }\r\n            return <ul className='row'>\r\n                {\r\n                    categories.map(category => (\r\n                        <Category \r\n                            key={category}\r\n                            title={category}/>\r\n                    ))\r\n                }\r\n            </ul>\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                    {\r\n                        categories === null || categories === undefined ?\r\n                        <h3 className='text-danger'>Oops there's nothing to show rn...</h3>\r\n                        : \r\n                        null\r\n                    }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(({jokes}) => {\r\n    return {\r\n        jokes\r\n    }\r\n}, {fetchCategories})(Categories)","import CategoriesQuery from '../api/Queries/CategoriesQuery';\r\nimport JokeQuery from '../api/Queries/JokeQuery';\r\nimport types from './types';\r\nimport Errors from '../constants/Errors';\r\n\r\nexport const fetchCategories = () => async (dispatch) => {\r\n    dispatch({type: types.LOADING, payload: true});\r\n    await CategoriesQuery(response => {\r\n        if(response){\r\n            dispatch({type: types.GET_CATEGORIES, payload: response.data});\r\n        }else {\r\n            dispatch({type: types.ON_ERROR, payload: Errors.CATEGORY_ERROR});\r\n        }\r\n    })\r\n}\r\n\r\nexport const fetchJoke = (category) => async (dispatch) => {\r\n    dispatch({type: types.LOADING, payload: true});\r\n    await JokeQuery({category}, response => {\r\n        if(response){\r\n            console.log('JOKE', response)\r\n            dispatch({type: types.GET_JOKE, payload: response.data.random.value});\r\n        }else{\r\n            dispatch({type: types.ON_ERROR, payload: Errors.JOKE_ERROR});\r\n        }\r\n    })\r\n}","import React, { Component, Fragment } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {fetchJoke} from '../actions';\r\nimport { Link } from 'react-router-dom';\r\n\r\n class Joke extends Component {\r\n\r\n    componentDidMount(){\r\n        let {category} = this.props.match.params;\r\n        this.props.fetchJoke(category);\r\n    }\r\n\r\n    render() {\r\n        const {loading, error, random, category} = this.props.jokes;\r\n\r\n        if(loading) return <h3>Loading</h3>\r\n\r\n        if(error){ \r\n            console.log(category)\r\n            return <h3>Oops...</h3>\r\n        }\r\n\r\n        return (\r\n            <Fragment> \r\n                <div>\r\n                    <div\r\n                        className=\"card text-center h4 bg-light mx-3 my-3\">\r\n                            <div className=\"card-body text-dark\">{random}</div>\r\n                    </div>\r\n                    <Link to='/' className='btn btn-dark'>Back</Link>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(({jokes}) => {\r\n    return {\r\n        jokes\r\n    }\r\n}, {fetchJoke})(Joke)","import React from 'react';\nimport ApolloClient, { from } from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Categories from './components/Categories';\nimport Joke from './components/Joke';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className='container-md'>\n            <h1 className='text-center mt-3'>Chuck Norris</h1>\n            <h3 className='text-center'>Jokes discovered Chuck</h3>\n            <Route exact path='/' component={Categories}/>\n            <Route exact path='/random/:category' component={Joke}/>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import {combineReducers} from 'redux';\r\nimport JokesReducer from './Jokes';\r\n\r\nexport default combineReducers({\r\n    jokes: JokesReducer\r\n});","import types from '../../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n    switch(action.type){\r\n        case types.GET_CATEGORIES:\r\n            return {...state, loading: false, ...action.payload};\r\n        case types.SELECT_CATEGORY:\r\n            return {...state, selected_category: action.payload};\r\n        case types.GET_JOKE:\r\n            return {...state, random: action.payload, loading: false}\r\n        case types.LOADING:\r\n            return {...state, loading: action.payload};\r\n        default: \r\n            return state;\r\n    }\r\n}","import {createStore, applyMiddleware} from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport RootReducer from '../reducers';\r\n\r\nexport const middlewares = [ReduxThunk];\r\n\r\nexport const createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\r\n\r\nexport const store = createStoreWithMiddleware(RootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}